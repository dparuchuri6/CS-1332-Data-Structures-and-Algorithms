import org.junit.Before;
import org.junit.Test;

import java.util.Arrays;
import java.util.LinkedList;
import java.util.List;

import static org.junit.Assert.*;

/**
 * AVL tests.
 * @author Timothy Gregg
 * @version 1.0
 */
public class TGreggStressTestRound2 {

    private AVLInterface<Integer> avlTree;

    @Before
    public void setup() {
        avlTree = new AVL<>();
    }

    @Test
    public void StressTestIsBestTest() {
        List<Integer> comparisonList;
        assertEquals(0, avlTree.size());
        avlTree.add(718);
        Integer[] comparisonArr0 = {718};
        assertEquals(1, avlTree.size());
        comparisonList = new LinkedList<>(Arrays.asList(comparisonArr0));
        assertEquals(comparisonList, avlTree.levelorder());
        avlTree.add(322);
        Integer[] comparisonArr1 = {718, 322};
        assertEquals(2, avlTree.size());
        comparisonList = new LinkedList<>(Arrays.asList(comparisonArr1));
        assertEquals(comparisonList, avlTree.levelorder());
        avlTree.add(517);
        Integer[] comparisonArr2 = {517, 322, 718};
        assertEquals(3, avlTree.size());
        comparisonList = new LinkedList<>(Arrays.asList(comparisonArr2));
        assertEquals(comparisonList, avlTree.levelorder());
        avlTree.add(272);
        Integer[] comparisonArr3 = {517, 322, 718, 272};
        assertEquals(4, avlTree.size());
        comparisonList = new LinkedList<>(Arrays.asList(comparisonArr3));
        assertEquals(comparisonList, avlTree.levelorder());
        avlTree.add(193);
        Integer[] comparisonArr4 = {517, 272, 718, 193, 322};
        assertEquals(5, avlTree.size());
        comparisonList = new LinkedList<>(Arrays.asList(comparisonArr4));
        assertEquals(comparisonList, avlTree.levelorder());
        avlTree.add(824);
        Integer[] comparisonArr5 = {517, 272, 718, 193, 322, 824};
        assertEquals(6, avlTree.size());
        comparisonList = new LinkedList<>(Arrays.asList(comparisonArr5));
        assertEquals(comparisonList, avlTree.levelorder());
        avlTree.add(389);
        Integer[] comparisonArr6 = {517, 272, 718, 193, 322, 824, 389};
        assertEquals(7, avlTree.size());
        comparisonList = new LinkedList<>(Arrays.asList(comparisonArr6));
        assertEquals(comparisonList, avlTree.levelorder());
        avlTree.add(424);
        Integer[] comparisonArr7 = {517, 272, 718, 193, 389, 824, 322, 424};
        assertEquals(8, avlTree.size());
        comparisonList = new LinkedList<>(Arrays.asList(comparisonArr7));
        assertEquals(comparisonList, avlTree.levelorder());
        avlTree.add(436);
        Integer[] comparisonArr8 = {517, 389, 718, 272, 424, 824, 193, 322, 436};
        assertEquals(9, avlTree.size());
        comparisonList = new LinkedList<>(Arrays.asList(comparisonArr8));
        assertEquals(comparisonList, avlTree.levelorder());
        avlTree.add(856);
        Integer[] comparisonArr9 = {517, 389, 824, 272, 424, 718, 856, 193, 322, 436};
        assertEquals(10, avlTree.size());
        comparisonList = new LinkedList<>(Arrays.asList(comparisonArr9));
        assertEquals(comparisonList, avlTree.levelorder());
        avlTree.add(388);
        Integer[] comparisonArr10 = {389, 272, 517, 193, 322, 424, 824, 388, 436, 718, 856};
        assertEquals(11, avlTree.size());
        comparisonList = new LinkedList<>(Arrays.asList(comparisonArr10));
        assertEquals(comparisonList, avlTree.levelorder());
        assertEquals((Integer) 272, avlTree.remove(272));
        Integer[] comparisonArr11 = {389, 322, 517, 193, 388, 424, 824, 436, 718, 856};
        assertEquals(10, avlTree.size());
        comparisonList = new LinkedList<>(Arrays.asList(comparisonArr11));
        assertEquals(comparisonList, avlTree.levelorder());
        avlTree.add(677);
        Integer[] comparisonArr12 = {517, 389, 824, 322, 424, 718, 856, 193, 388, 436, 677};
        assertEquals(11, avlTree.size());
        comparisonList = new LinkedList<>(Arrays.asList(comparisonArr12));
        assertEquals(comparisonList, avlTree.levelorder());
        avlTree.add(997);
        Integer[] comparisonArr13 = {517, 389, 824, 322, 424, 718, 856, 193, 388, 436, 677, 997};
        assertEquals(12, avlTree.size());
        comparisonList = new LinkedList<>(Arrays.asList(comparisonArr13));
        assertEquals(comparisonList, avlTree.levelorder());
        assertEquals((Integer) 322, avlTree.remove(322));
        Integer[] comparisonArr14 = {517, 389, 824, 193, 424, 718, 856, 388, 436, 677, 997};
        assertEquals(11, avlTree.size());
        comparisonList = new LinkedList<>(Arrays.asList(comparisonArr14));
        assertEquals(comparisonList, avlTree.levelorder());
        avlTree.add(773);
        Integer[] comparisonArr15 = {517, 389, 824, 193, 424, 718, 856, 388, 436, 677, 773, 997};
        assertEquals(12, avlTree.size());
        comparisonList = new LinkedList<>(Arrays.asList(comparisonArr15));
        assertEquals(comparisonList, avlTree.levelorder());
        avlTree.add(857);
        Integer[] comparisonArr16 = {517, 389, 824, 193, 424, 718, 857, 388, 436, 677, 773, 856, 997};
        assertEquals(13, avlTree.size());
        comparisonList = new LinkedList<>(Arrays.asList(comparisonArr16));
        assertEquals(comparisonList, avlTree.levelorder());
        assertEquals((Integer) 718, avlTree.remove(718));
        Integer[] comparisonArr17 = {517, 389, 824, 193, 424, 677, 857, 388, 436, 773, 856, 997};
        assertEquals(12, avlTree.size());
        comparisonList = new LinkedList<>(Arrays.asList(comparisonArr17));
        assertEquals(comparisonList, avlTree.levelorder());
        avlTree.add(49);
        Integer[] comparisonArr18 = {517, 389, 824, 193, 424, 677, 857, 49, 388, 436, 773, 856, 997};
        assertEquals(13, avlTree.size());
        comparisonList = new LinkedList<>(Arrays.asList(comparisonArr18));
        assertEquals(comparisonList, avlTree.levelorder());
        avlTree.add(888);
        Integer[] comparisonArr19 = {517, 389, 824, 193, 424, 677, 857, 49, 388, 436, 773, 856, 997, 888};
        assertEquals(14, avlTree.size());
        comparisonList = new LinkedList<>(Arrays.asList(comparisonArr19));
        assertEquals(comparisonList, avlTree.levelorder());
        avlTree.add(257);
        Integer[] comparisonArr20 = {517, 389, 824, 193, 424, 677, 857, 49, 388, 436, 773, 856, 997, 257, 888};
        assertEquals(15, avlTree.size());
        comparisonList = new LinkedList<>(Arrays.asList(comparisonArr20));
        assertEquals(comparisonList, avlTree.levelorder());
        avlTree.add(854);
        Integer[] comparisonArr21 = {517, 389, 824, 193, 424, 677, 857, 49, 388, 436, 773, 856, 997, 257, 854, 888};
        assertEquals(16, avlTree.size());
        comparisonList = new LinkedList<>(Arrays.asList(comparisonArr21));
        assertEquals(comparisonList, avlTree.levelorder());
        avlTree.add(312);
        Integer[] comparisonArr22 = {517, 389, 824, 193, 424, 677, 857, 49, 312, 436, 773, 856, 997, 257, 388, 854, 888};
        assertEquals(17, avlTree.size());
        comparisonList = new LinkedList<>(Arrays.asList(comparisonArr22));
        assertEquals(comparisonList, avlTree.levelorder());
        avlTree.add(723);
        Integer[] comparisonArr23 = {517, 389, 824, 193, 424, 723, 857, 49, 312, 436, 677, 773, 856, 997, 257, 388, 854, 888};
        assertEquals(18, avlTree.size());
        comparisonList = new LinkedList<>(Arrays.asList(comparisonArr23));
        assertEquals(comparisonList, avlTree.levelorder());
        avlTree.add(415);
        Integer[] comparisonArr24 = {517, 389, 824, 193, 424, 723, 857, 49, 312, 415, 436, 677, 773, 856, 997, 257, 388, 854, 888};
        assertEquals(19, avlTree.size());
        comparisonList = new LinkedList<>(Arrays.asList(comparisonArr24));
        assertEquals(comparisonList, avlTree.levelorder());
        assertEquals((Integer) 517, avlTree.remove(517));
        Integer[] comparisonArr25 = {436, 389, 824, 193, 424, 723, 857, 49, 312, 415, 677, 773, 856, 997, 257, 388, 854, 888};
        assertEquals(18, avlTree.size());
        comparisonList = new LinkedList<>(Arrays.asList(comparisonArr25));
        assertEquals(comparisonList, avlTree.levelorder());
        avlTree.add(815);
        Integer[] comparisonArr26 = {436, 389, 824, 193, 424, 723, 857, 49, 312, 415, 677, 773, 856, 997, 257, 388, 815, 854, 888};
        assertEquals(19, avlTree.size());
        comparisonList = new LinkedList<>(Arrays.asList(comparisonArr26));
        assertEquals(comparisonList, avlTree.levelorder());
        assertEquals((Integer) 824, avlTree.remove(824));
        Integer[] comparisonArr27 = {436, 389, 815, 193, 424, 723, 857, 49, 312, 415, 677, 773, 856, 997, 257, 388, 854, 888};
        assertEquals(18, avlTree.size());
        comparisonList = new LinkedList<>(Arrays.asList(comparisonArr27));
        assertEquals(comparisonList, avlTree.levelorder());
        avlTree.add(519);
        Integer[] comparisonArr28 = {436, 389, 815, 193, 424, 723, 857, 49, 312, 415, 677, 773, 856, 997, 257, 388, 519, 854, 888};
        assertEquals(19, avlTree.size());
        comparisonList = new LinkedList<>(Arrays.asList(comparisonArr28));
        assertEquals(comparisonList, avlTree.levelorder());
        assertEquals((Integer) 997, avlTree.remove(997));
        Integer[] comparisonArr29 = {436, 389, 815, 193, 424, 723, 857, 49, 312, 415, 677, 773, 856, 888, 257, 388, 519, 854};
        assertEquals(18, avlTree.size());
        comparisonList = new LinkedList<>(Arrays.asList(comparisonArr29));
        assertEquals(comparisonList, avlTree.levelorder());
        avlTree.add(161);
        Integer[] comparisonArr30 = {436, 389, 815, 193, 424, 723, 857, 49, 312, 415, 677, 773, 856, 888, 161, 257, 388, 519, 854};
        assertEquals(19, avlTree.size());
        comparisonList = new LinkedList<>(Arrays.asList(comparisonArr30));
        assertEquals(comparisonList, avlTree.levelorder());
        avlTree.add(641);
        Integer[] comparisonArr31 = {436, 389, 815, 193, 424, 723, 857, 49, 312, 415, 641, 773, 856, 888, 161, 257, 388, 519, 677, 854};
        assertEquals(20, avlTree.size());
        comparisonList = new LinkedList<>(Arrays.asList(comparisonArr31));
        assertEquals(comparisonList, avlTree.levelorder());
        avlTree.add(584);
        Integer[] comparisonArr32 = {436, 389, 815, 193, 424, 641, 857, 49, 312, 415, 519, 723, 856, 888, 161, 257, 388, 584, 677, 773, 854};
        assertEquals(21, avlTree.size());
        comparisonList = new LinkedList<>(Arrays.asList(comparisonArr32));
        assertEquals(comparisonList, avlTree.levelorder());
        assertEquals((Integer) 815, avlTree.remove(815));
        Integer[] comparisonArr33 = {436, 389, 773, 193, 424, 641, 857, 49, 312, 415, 519, 723, 856, 888, 161, 257, 388, 584, 677, 854};
        assertEquals(20, avlTree.size());
        comparisonList = new LinkedList<>(Arrays.asList(comparisonArr33));
        assertEquals(comparisonList, avlTree.levelorder());
        avlTree.add(41);
        Integer[] comparisonArr34 = {436, 389, 773, 193, 424, 641, 857, 49, 312, 415, 519, 723, 856, 888, 41, 161, 257, 388, 584, 677, 854};
        assertEquals(21, avlTree.size());
        comparisonList = new LinkedList<>(Arrays.asList(comparisonArr34));
        assertEquals(comparisonList, avlTree.levelorder());
        avlTree.add(344);
        Integer[] comparisonArr35 = {436, 312, 773, 193, 389, 641, 857, 49, 257, 388, 424, 519, 723, 856, 888, 41, 161, 344, 415, 584, 677, 854};
        assertEquals(22, avlTree.size());
        comparisonList = new LinkedList<>(Arrays.asList(comparisonArr35));
        assertEquals(comparisonList, avlTree.levelorder());
        avlTree.add(354);
        Integer[] comparisonArr36 = {436, 312, 773, 193, 389, 641, 857, 49, 257, 354, 424, 519, 723, 856, 888, 41, 161, 344, 388, 415, 584, 677, 854};
        assertEquals(23, avlTree.size());
        comparisonList = new LinkedList<>(Arrays.asList(comparisonArr36));
        assertEquals(comparisonList, avlTree.levelorder());
        assertEquals((Integer) 344, avlTree.remove(344));
        Integer[] comparisonArr37 = {436, 312, 773, 193, 389, 641, 857, 49, 257, 354, 424, 519, 723, 856, 888, 41, 161, 388, 415, 584, 677, 854};
        assertEquals(22, avlTree.size());
        comparisonList = new LinkedList<>(Arrays.asList(comparisonArr37));
        assertEquals(comparisonList, avlTree.levelorder());
        assertEquals((Integer) 354, avlTree.remove(354));
        Integer[] comparisonArr38 = {436, 312, 773, 193, 389, 641, 857, 49, 257, 388, 424, 519, 723, 856, 888, 41, 161, 415, 584, 677, 854};
        assertEquals(21, avlTree.size());
        comparisonList = new LinkedList<>(Arrays.asList(comparisonArr38));
        assertEquals(comparisonList, avlTree.levelorder());
        avlTree.add(981);
        Integer[] comparisonArr39 = {436, 312, 773, 193, 389, 641, 857, 49, 257, 388, 424, 519, 723, 856, 888, 41, 161, 415, 584, 677, 854, 981};
        assertEquals(22, avlTree.size());
        comparisonList = new LinkedList<>(Arrays.asList(comparisonArr39));
        assertEquals(comparisonList, avlTree.levelorder());
        avlTree.add(104);
        Integer[] comparisonArr40 = {436, 312, 773, 161, 389, 641, 857, 49, 193, 388, 424, 519, 723, 856, 888, 41, 104, 257, 415, 584, 677, 854, 981};
        assertEquals(23, avlTree.size());
        comparisonList = new LinkedList<>(Arrays.asList(comparisonArr40));
        assertEquals(comparisonList, avlTree.levelorder());
        assertEquals((Integer) 312, avlTree.remove(312));
        Integer[] comparisonArr41 = {436, 257, 773, 161, 389, 641, 857, 49, 193, 388, 424, 519, 723, 856, 888, 41, 104, 415, 584, 677, 854, 981};
        assertEquals(22, avlTree.size());
        comparisonList = new LinkedList<>(Arrays.asList(comparisonArr41));
        assertEquals(comparisonList, avlTree.levelorder());
        avlTree.add(864);
        Integer[] comparisonArr42 = {436, 257, 773, 161, 389, 641, 857, 49, 193, 388, 424, 519, 723, 856, 888, 41, 104, 415, 584, 677, 854, 864, 981};
        assertEquals(23, avlTree.size());
        comparisonList = new LinkedList<>(Arrays.asList(comparisonArr42));
        assertEquals(comparisonList, avlTree.levelorder());
        avlTree.add(685);
        Integer[] comparisonArr43 = {436, 257, 773, 161, 389, 641, 857, 49, 193, 388, 424, 519, 685, 856, 888, 41, 104, 415, 584, 677, 723, 854, 864, 981};
        assertEquals(24, avlTree.size());
        comparisonList = new LinkedList<>(Arrays.asList(comparisonArr43));
        assertEquals(comparisonList, avlTree.levelorder());
        avlTree.add(29);
        Integer[] comparisonArr44 = {436, 257, 773, 49, 389, 641, 857, 41, 161, 388, 424, 519, 685, 856, 888, 29, 104, 193, 415, 584, 677, 723, 854, 864, 981};
        assertEquals(25, avlTree.size());
        comparisonList = new LinkedList<>(Arrays.asList(comparisonArr44));
        assertEquals(comparisonList, avlTree.levelorder());
        avlTree.add(628);
        Integer[] comparisonArr45 = {436, 257, 773, 49, 389, 641, 857, 41, 161, 388, 424, 584, 685, 856, 888, 29, 104, 193, 415, 519, 628, 677, 723, 854, 864, 981};
        assertEquals(26, avlTree.size());
        comparisonList = new LinkedList<>(Arrays.asList(comparisonArr45));
        assertEquals(comparisonList, avlTree.levelorder());
        avlTree.add(88);
        Integer[] comparisonArr46 = {436, 257, 773, 49, 389, 641, 857, 41, 161, 388, 424, 584, 685, 856, 888, 29, 104, 193, 415, 519, 628, 677, 723, 854, 864, 981, 88};
        assertEquals(27, avlTree.size());
        comparisonList = new LinkedList<>(Arrays.asList(comparisonArr46));
        assertEquals(comparisonList, avlTree.levelorder());
        avlTree.add(613);
        Integer[] comparisonArr47 = {436, 257, 773, 49, 389, 641, 857, 41, 161, 388, 424, 584, 685, 856, 888, 29, 104, 193, 415, 519, 628, 677, 723, 854, 864, 981, 88, 613};
        assertEquals(28, avlTree.size());
        comparisonList = new LinkedList<>(Arrays.asList(comparisonArr47));
        assertEquals(comparisonList, avlTree.levelorder());
        avlTree.add(736);
        Integer[] comparisonArr48 = {436, 257, 773, 49, 389, 641, 857, 41, 161, 388, 424, 584, 685, 856, 888, 29, 104, 193, 415, 519, 628, 677, 723, 854, 864, 981, 88, 613, 736};
        assertEquals(29, avlTree.size());
        comparisonList = new LinkedList<>(Arrays.asList(comparisonArr48));
        assertEquals(comparisonList, avlTree.levelorder());
        assertEquals((Integer) 981, avlTree.remove(981));
        Integer[] comparisonArr49 = {436, 257, 773, 49, 389, 641, 857, 41, 161, 388, 424, 584, 685, 856, 888, 29, 104, 193, 415, 519, 628, 677, 723, 854, 864, 88, 613, 736};
        assertEquals(28, avlTree.size());
        comparisonList = new LinkedList<>(Arrays.asList(comparisonArr49));
        assertEquals(comparisonList, avlTree.levelorder());
        assertEquals((Integer) 257, avlTree.remove(257));
        Integer[] comparisonArr50 = {436, 193, 773, 49, 389, 641, 857, 41, 104, 388, 424, 584, 685, 856, 888, 29, 88, 161, 415, 519, 628, 677, 723, 854, 864, 613, 736};
        assertEquals(27, avlTree.size());
        comparisonList = new LinkedList<>(Arrays.asList(comparisonArr50));
        assertEquals(comparisonList, avlTree.levelorder());
        avlTree.add(246);
        Integer[] comparisonArr51 = {436, 193, 773, 49, 389, 641, 857, 41, 104, 388, 424, 584, 685, 856, 888, 29, 88, 161, 246, 415, 519, 628, 677, 723, 854, 864, 613, 736};
        assertEquals(28, avlTree.size());
        comparisonList = new LinkedList<>(Arrays.asList(comparisonArr51));
        assertEquals(comparisonList, avlTree.levelorder());
        avlTree.add(242);
        Integer[] comparisonArr52 = {436, 193, 773, 49, 389, 641, 857, 41, 104, 246, 424, 584, 685, 856, 888, 29, 88, 161, 242, 388, 415, 519, 628, 677, 723, 854, 864, 613, 736};
        assertEquals(29, avlTree.size());
        comparisonList = new LinkedList<>(Arrays.asList(comparisonArr52));
        assertEquals(comparisonList, avlTree.levelorder());
        avlTree.add(743);
        Integer[] comparisonArr53 = {436, 193, 773, 49, 389, 641, 857, 41, 104, 246, 424, 584, 685, 856, 888, 29, 88, 161, 242, 388, 415, 519, 628, 677, 736, 854, 864, 613, 723, 743};
        assertEquals(30, avlTree.size());
        comparisonList = new LinkedList<>(Arrays.asList(comparisonArr53));
        assertEquals(comparisonList, avlTree.levelorder());
        avlTree.add(930);
        Integer[] comparisonArr54 = {436, 193, 773, 49, 389, 641, 857, 41, 104, 246, 424, 584, 685, 856, 888, 29, 88, 161, 242, 388, 415, 519, 628, 677, 736, 854, 864, 930, 613, 723, 743};
        assertEquals(31, avlTree.size());
        comparisonList = new LinkedList<>(Arrays.asList(comparisonArr54));
        assertEquals(comparisonList, avlTree.levelorder());
        avlTree.add(768);
        Integer[] comparisonArr55 = {436, 193, 773, 49, 389, 641, 857, 41, 104, 246, 424, 584, 736, 856, 888, 29, 88, 161, 242, 388, 415, 519, 628, 685, 743, 854, 864, 930, 613, 677, 723, 768};
        assertEquals(32, avlTree.size());
        comparisonList = new LinkedList<>(Arrays.asList(comparisonArr55));
        assertEquals(comparisonList, avlTree.levelorder());
        avlTree.add(827);
        Integer[] comparisonArr56 = {436, 193, 773, 49, 389, 641, 857, 41, 104, 246, 424, 584, 736, 854, 888, 29, 88, 161, 242, 388, 415, 519, 628, 685, 743, 827, 856, 864, 930, 613, 677, 723, 768};
        assertEquals(33, avlTree.size());
        comparisonList = new LinkedList<>(Arrays.asList(comparisonArr56));
        assertEquals(comparisonList, avlTree.levelorder());
        assertEquals((Integer) 827, avlTree.remove(827));
        Integer[] comparisonArr57 = {436, 193, 773, 49, 389, 641, 857, 41, 104, 246, 424, 584, 736, 854, 888, 29, 88, 161, 242, 388, 415, 519, 628, 685, 743, 856, 864, 930, 613, 677, 723, 768};
        assertEquals(32, avlTree.size());
        comparisonList = new LinkedList<>(Arrays.asList(comparisonArr57));
        assertEquals(comparisonList, avlTree.levelorder());
        assertEquals((Integer) 193, avlTree.remove(193));
        Integer[] comparisonArr58 = {436, 161, 773, 49, 389, 641, 857, 41, 104, 246, 424, 584, 736, 854, 888, 29, 88, 242, 388, 415, 519, 628, 685, 743, 856, 864, 930, 613, 677, 723, 768};
        assertEquals(31, avlTree.size());
        comparisonList = new LinkedList<>(Arrays.asList(comparisonArr58));
        assertEquals(comparisonList, avlTree.levelorder());
        avlTree.add(705);
        Integer[] comparisonArr59 = {436, 161, 736, 49, 389, 641, 773, 41, 104, 246, 424, 584, 685, 743, 857, 29, 88, 242, 388, 415, 519, 628, 677, 723, 768, 854, 888, 613, 705, 856, 864, 930};
        assertEquals(32, avlTree.size());
        comparisonList = new LinkedList<>(Arrays.asList(comparisonArr59));
        assertEquals(comparisonList, avlTree.levelorder());
        avlTree.add(962);
        Integer[] comparisonArr60 = {436, 161, 736, 49, 389, 641, 857, 41, 104, 246, 424, 584, 685, 773, 888, 29, 88, 242, 388, 415, 519, 628, 677, 723, 743, 854, 864, 930, 613, 705, 768, 856, 962};
        assertEquals(33, avlTree.size());
        comparisonList = new LinkedList<>(Arrays.asList(comparisonArr60));
        assertEquals(comparisonList, avlTree.levelorder());
        avlTree.add(344);
        Integer[] comparisonArr61 = {436, 161, 736, 49, 389, 641, 857, 41, 104, 246, 424, 584, 685, 773, 888, 29, 88, 242, 388, 415, 519, 628, 677, 723, 743, 854, 864, 930, 344, 613, 705, 768, 856, 962};
        assertEquals(34, avlTree.size());
        comparisonList = new LinkedList<>(Arrays.asList(comparisonArr61));
        assertEquals(comparisonList, avlTree.levelorder());
        avlTree.add(757);
        Integer[] comparisonArr62 = {436, 161, 736, 49, 389, 641, 857, 41, 104, 246, 424, 584, 685, 773, 888, 29, 88, 242, 388, 415, 519, 628, 677, 723, 757, 854, 864, 930, 344, 613, 705, 743, 768, 856, 962};
        assertEquals(35, avlTree.size());
        comparisonList = new LinkedList<>(Arrays.asList(comparisonArr62));
        assertEquals(comparisonList, avlTree.levelorder());
        assertEquals((Integer) 344, avlTree.remove(344));
        Integer[] comparisonArr63 = {436, 161, 736, 49, 389, 641, 857, 41, 104, 246, 424, 584, 685, 773, 888, 29, 88, 242, 388, 415, 519, 628, 677, 723, 757, 854, 864, 930, 613, 705, 743, 768, 856, 962};
        assertEquals(34, avlTree.size());
        comparisonList = new LinkedList<>(Arrays.asList(comparisonArr63));
        assertEquals(comparisonList, avlTree.levelorder());
        avlTree.add(140);
        Integer[] comparisonArr64 = {436, 161, 736, 49, 389, 641, 857, 41, 104, 246, 424, 584, 685, 773, 888, 29, 88, 140, 242, 388, 415, 519, 628, 677, 723, 757, 854, 864, 930, 613, 705, 743, 768, 856, 962};
        assertEquals(35, avlTree.size());
        comparisonList = new LinkedList<>(Arrays.asList(comparisonArr64));
        assertEquals(comparisonList, avlTree.levelorder());
        assertEquals((Integer) 88, avlTree.remove(88));
        Integer[] comparisonArr65 = {436, 161, 736, 49, 389, 641, 857, 41, 104, 246, 424, 584, 685, 773, 888, 29, 140, 242, 388, 415, 519, 628, 677, 723, 757, 854, 864, 930, 613, 705, 743, 768, 856, 962};
        assertEquals(34, avlTree.size());
        comparisonList = new LinkedList<>(Arrays.asList(comparisonArr65));
        assertEquals(comparisonList, avlTree.levelorder());
        avlTree.add(622);
        Integer[] comparisonArr66 = {436, 161, 736, 49, 389, 641, 857, 41, 104, 246, 424, 584, 685, 773, 888, 29, 140, 242, 388, 415, 519, 622, 677, 723, 757, 854, 864, 930, 613, 628, 705, 743, 768, 856, 962};
        assertEquals(35, avlTree.size());
        comparisonList = new LinkedList<>(Arrays.asList(comparisonArr66));
        assertEquals(comparisonList, avlTree.levelorder());
        avlTree.add(816);
        Integer[] comparisonArr67 = {436, 161, 736, 49, 389, 641, 857, 41, 104, 246, 424, 584, 685, 773, 888, 29, 140, 242, 388, 415, 519, 622, 677, 723, 757, 854, 864, 930, 613, 628, 705, 743, 768, 816, 856, 962};
        assertEquals(36, avlTree.size());
        comparisonList = new LinkedList<>(Arrays.asList(comparisonArr67));
        assertEquals(comparisonList, avlTree.levelorder());
        avlTree.add(957);
        Integer[] comparisonArr68 = {436, 161, 736, 49, 389, 641, 857, 41, 104, 246, 424, 584, 685, 773, 888, 29, 140, 242, 388, 415, 519, 622, 677, 723, 757, 854, 864, 957, 613, 628, 705, 743, 768, 816, 856, 930, 962};
        assertEquals(37, avlTree.size());
        comparisonList = new LinkedList<>(Arrays.asList(comparisonArr68));
        assertEquals(comparisonList, avlTree.levelorder());
        avlTree.add(697);
        Integer[] comparisonArr69 = {436, 161, 736, 49, 389, 641, 857, 41, 104, 246, 424, 584, 685, 773, 888, 29, 140, 242, 388, 415, 519, 622, 677, 705, 757, 854, 864, 957, 613, 628, 697, 723, 743, 768, 816, 856, 930, 962};
        assertEquals(38, avlTree.size());
        comparisonList = new LinkedList<>(Arrays.asList(comparisonArr69));
        assertEquals(comparisonList, avlTree.levelorder());
        avlTree.add(398);
        Integer[] comparisonArr70 = {436, 161, 736, 49, 389, 641, 857, 41, 104, 246, 415, 584, 685, 773, 888, 29, 140, 242, 388, 398, 424, 519, 622, 677, 705, 757, 854, 864, 957, 613, 628, 697, 723, 743, 768, 816, 856, 930, 962};
        assertEquals(39, avlTree.size());
        comparisonList = new LinkedList<>(Arrays.asList(comparisonArr70));
        assertEquals(comparisonList, avlTree.levelorder());
        avlTree.add(310);
        Integer[] comparisonArr71 = {436, 161, 736, 49, 389, 641, 857, 41, 104, 246, 415, 584, 685, 773, 888, 29, 140, 242, 388, 398, 424, 519, 622, 677, 705, 757, 854, 864, 957, 310, 613, 628, 697, 723, 743, 768, 816, 856, 930, 962};
        assertEquals(40, avlTree.size());
        comparisonList = new LinkedList<>(Arrays.asList(comparisonArr71));
        assertEquals(comparisonList, avlTree.levelorder());
        avlTree.add(986);
        Integer[] comparisonArr72 = {436, 161, 736, 49, 389, 641, 857, 41, 104, 246, 415, 584, 685, 773, 957, 29, 140, 242, 388, 398, 424, 519, 622, 677, 705, 757, 854, 888, 962, 310, 613, 628, 697, 723, 743, 768, 816, 856, 864, 930, 986};
        assertEquals(41, avlTree.size());
        comparisonList = new LinkedList<>(Arrays.asList(comparisonArr72));
        assertEquals(comparisonList, avlTree.levelorder());
        assertEquals((Integer) 398, avlTree.remove(398));
        Integer[] comparisonArr73 = {436, 161, 736, 49, 389, 641, 857, 41, 104, 246, 415, 584, 685, 773, 957, 29, 140, 242, 388, 424, 519, 622, 677, 705, 757, 854, 888, 962, 310, 613, 628, 697, 723, 743, 768, 816, 856, 864, 930, 986};
        assertEquals(40, avlTree.size());
        comparisonList = new LinkedList<>(Arrays.asList(comparisonArr73));
        assertEquals(comparisonList, avlTree.levelorder());
        assertEquals((Integer) 854, avlTree.remove(854));
        Integer[] comparisonArr74 = {436, 161, 736, 49, 389, 641, 857, 41, 104, 246, 415, 584, 685, 773, 957, 29, 140, 242, 388, 424, 519, 622, 677, 705, 757, 816, 888, 962, 310, 613, 628, 697, 723, 743, 768, 856, 864, 930, 986};
        assertEquals(39, avlTree.size());
        comparisonList = new LinkedList<>(Arrays.asList(comparisonArr74));
        assertEquals(comparisonList, avlTree.levelorder());
        assertEquals((Integer) 622, avlTree.remove(622));
        Integer[] comparisonArr75 = {436, 161, 736, 49, 389, 641, 857, 41, 104, 246, 415, 584, 685, 773, 957, 29, 140, 242, 388, 424, 519, 613, 677, 705, 757, 816, 888, 962, 310, 628, 697, 723, 743, 768, 856, 864, 930, 986};
        assertEquals(38, avlTree.size());
        comparisonList = new LinkedList<>(Arrays.asList(comparisonArr75));
        assertEquals(comparisonList, avlTree.levelorder());
        assertEquals((Integer) 816, avlTree.remove(816));
        Integer[] comparisonArr76 = {436, 161, 736, 49, 389, 641, 857, 41, 104, 246, 415, 584, 685, 773, 957, 29, 140, 242, 388, 424, 519, 613, 677, 705, 757, 856, 888, 962, 310, 628, 697, 723, 743, 768, 864, 930, 986};
        assertEquals(37, avlTree.size());
        comparisonList = new LinkedList<>(Arrays.asList(comparisonArr76));
        assertEquals(comparisonList, avlTree.levelorder());
        assertEquals((Integer) 49, avlTree.remove(49));
        Integer[] comparisonArr77 = {436, 161, 736, 41, 389, 641, 857, 29, 104, 246, 415, 584, 685, 773, 957, 140, 242, 388, 424, 519, 613, 677, 705, 757, 856, 888, 962, 310, 628, 697, 723, 743, 768, 864, 930, 986};
        assertEquals(36, avlTree.size());
        comparisonList = new LinkedList<>(Arrays.asList(comparisonArr77));
        assertEquals(comparisonList, avlTree.levelorder());
        assertEquals((Integer) 641, avlTree.remove(641));
        Integer[] comparisonArr78 = {436, 161, 736, 41, 389, 628, 857, 29, 104, 246, 415, 584, 685, 773, 957, 140, 242, 388, 424, 519, 613, 677, 705, 757, 856, 888, 962, 310, 697, 723, 743, 768, 864, 930, 986};
        assertEquals(35, avlTree.size());
        comparisonList = new LinkedList<>(Arrays.asList(comparisonArr78));
        assertEquals(comparisonList, avlTree.levelorder());
        assertEquals((Integer) 242, avlTree.remove(242));
        Integer[] comparisonArr79 = {436, 161, 736, 41, 389, 628, 857, 29, 104, 310, 415, 584, 685, 773, 957, 140, 246, 388, 424, 519, 613, 677, 705, 757, 856, 888, 962, 697, 723, 743, 768, 864, 930, 986};
        assertEquals(34, avlTree.size());
        comparisonList = new LinkedList<>(Arrays.asList(comparisonArr79));
        assertEquals(comparisonList, avlTree.levelorder());
        assertEquals((Integer) 864, avlTree.remove(864));
        Integer[] comparisonArr80 = {436, 161, 736, 41, 389, 628, 857, 29, 104, 310, 415, 584, 685, 773, 957, 140, 246, 388, 424, 519, 613, 677, 705, 757, 856, 888, 962, 697, 723, 743, 768, 930, 986};
        assertEquals(33, avlTree.size());
        comparisonList = new LinkedList<>(Arrays.asList(comparisonArr80));
        assertEquals(comparisonList, avlTree.levelorder());
        assertEquals((Integer) 613, avlTree.remove(613));
        Integer[] comparisonArr81 = {436, 161, 736, 41, 389, 628, 857, 29, 104, 310, 415, 584, 685, 773, 957, 140, 246, 388, 424, 519, 677, 705, 757, 856, 888, 962, 697, 723, 743, 768, 930, 986};
        assertEquals(32, avlTree.size());
        comparisonList = new LinkedList<>(Arrays.asList(comparisonArr81));
        assertEquals(comparisonList, avlTree.levelorder());
        assertEquals((Integer) 743, avlTree.remove(743));
        Integer[] comparisonArr82 = {436, 161, 736, 41, 389, 628, 857, 29, 104, 310, 415, 584, 685, 773, 957, 140, 246, 388, 424, 519, 677, 705, 757, 856, 888, 962, 697, 723, 768, 930, 986};
        assertEquals(31, avlTree.size());
        comparisonList = new LinkedList<>(Arrays.asList(comparisonArr82));
        assertEquals(comparisonList, avlTree.levelorder());
        assertEquals((Integer) 519, avlTree.remove(519));
        Integer[] comparisonArr83 = {436, 161, 736, 41, 389, 685, 857, 29, 104, 310, 415, 628, 705, 773, 957, 140, 246, 388, 424, 584, 677, 697, 723, 757, 856, 888, 962, 768, 930, 986};
        assertEquals(30, avlTree.size());
        comparisonList = new LinkedList<>(Arrays.asList(comparisonArr83));
        assertEquals(comparisonList, avlTree.levelorder());
        assertEquals((Integer) 773, avlTree.remove(773));
        Integer[] comparisonArr84 = {436, 161, 736, 41, 389, 685, 857, 29, 104, 310, 415, 628, 705, 768, 957, 140, 246, 388, 424, 584, 677, 697, 723, 757, 856, 888, 962, 930, 986};
        assertEquals(29, avlTree.size());
        comparisonList = new LinkedList<>(Arrays.asList(comparisonArr84));
        assertEquals(comparisonList, avlTree.levelorder());
        assertEquals((Integer) 436, avlTree.remove(436));
        Integer[] comparisonArr85 = {424, 161, 736, 41, 389, 685, 857, 29, 104, 310, 415, 628, 705, 768, 957, 140, 246, 388, 584, 677, 697, 723, 757, 856, 888, 962, 930, 986};
        assertEquals(28, avlTree.size());
        comparisonList = new LinkedList<>(Arrays.asList(comparisonArr85));
        assertEquals(comparisonList, avlTree.levelorder());
        assertEquals((Integer) 697, avlTree.remove(697));
        Integer[] comparisonArr86 = {424, 161, 736, 41, 389, 685, 857, 29, 104, 310, 415, 628, 705, 768, 957, 140, 246, 388, 584, 677, 723, 757, 856, 888, 962, 930, 986};
        assertEquals(27, avlTree.size());
        comparisonList = new LinkedList<>(Arrays.asList(comparisonArr86));
        assertEquals(comparisonList, avlTree.levelorder());
        assertEquals((Integer) 757, avlTree.remove(757));
        Integer[] comparisonArr87 = {424, 161, 736, 41, 389, 685, 857, 29, 104, 310, 415, 628, 705, 768, 957, 140, 246, 388, 584, 677, 723, 856, 888, 962, 930, 986};
        assertEquals(26, avlTree.size());
        comparisonList = new LinkedList<>(Arrays.asList(comparisonArr87));
        assertEquals(comparisonList, avlTree.levelorder());
        assertEquals((Integer) 930, avlTree.remove(930));
        Integer[] comparisonArr88 = {424, 161, 736, 41, 389, 685, 857, 29, 104, 310, 415, 628, 705, 768, 957, 140, 246, 388, 584, 677, 723, 856, 888, 962, 986};
        assertEquals(25, avlTree.size());
        comparisonList = new LinkedList<>(Arrays.asList(comparisonArr88));
        assertEquals(comparisonList, avlTree.levelorder());
        assertEquals((Integer) 857, avlTree.remove(857));
        Integer[] comparisonArr89 = {424, 161, 736, 41, 389, 685, 957, 29, 104, 310, 415, 628, 705, 856, 962, 140, 246, 388, 584, 677, 723, 768, 888, 986};
        assertEquals(24, avlTree.size());
        comparisonList = new LinkedList<>(Arrays.asList(comparisonArr89));
        assertEquals(comparisonList, avlTree.levelorder());
        assertEquals((Integer) 677, avlTree.remove(677));
        Integer[] comparisonArr90 = {424, 161, 736, 41, 389, 685, 957, 29, 104, 310, 415, 628, 705, 856, 962, 140, 246, 388, 584, 723, 768, 888, 986};
        assertEquals(23, avlTree.size());
        comparisonList = new LinkedList<>(Arrays.asList(comparisonArr90));
        assertEquals(comparisonList, avlTree.levelorder());
        assertEquals((Integer) 723, avlTree.remove(723));
        Integer[] comparisonArr91 = {424, 161, 736, 41, 389, 685, 957, 29, 104, 310, 415, 628, 705, 856, 962, 140, 246, 388, 584, 768, 888, 986};
        assertEquals(22, avlTree.size());
        comparisonList = new LinkedList<>(Arrays.asList(comparisonArr91));
        assertEquals(comparisonList, avlTree.levelorder());
        assertEquals((Integer) 415, avlTree.remove(415));
        Integer[] comparisonArr92 = {424, 161, 736, 41, 310, 685, 957, 29, 104, 246, 389, 628, 705, 856, 962, 140, 388, 584, 768, 888, 986};
        assertEquals(21, avlTree.size());
        comparisonList = new LinkedList<>(Arrays.asList(comparisonArr92));
        assertEquals(comparisonList, avlTree.levelorder());
        assertEquals((Integer) 29, avlTree.remove(29));
        Integer[] comparisonArr93 = {424, 161, 736, 104, 310, 685, 957, 41, 140, 246, 389, 628, 705, 856, 962, 388, 584, 768, 888, 986};
        assertEquals(20, avlTree.size());
        comparisonList = new LinkedList<>(Arrays.asList(comparisonArr93));
        assertEquals(comparisonList, avlTree.levelorder());
        assertEquals((Integer) 161, avlTree.remove(161));
        Integer[] comparisonArr94 = {424, 140, 736, 104, 310, 685, 957, 41, 246, 389, 628, 705, 856, 962, 388, 584, 768, 888, 986};
        assertEquals(19, avlTree.size());
        comparisonList = new LinkedList<>(Arrays.asList(comparisonArr94));
        assertEquals(comparisonList, avlTree.levelorder());
        assertEquals((Integer) 856, avlTree.remove(856));
        Integer[] comparisonArr95 = {424, 140, 736, 104, 310, 685, 957, 41, 246, 389, 628, 705, 768, 962, 388, 584, 888, 986};
        assertEquals(18, avlTree.size());
        comparisonList = new LinkedList<>(Arrays.asList(comparisonArr95));
        assertEquals(comparisonList, avlTree.levelorder());
        assertEquals((Integer) 888, avlTree.remove(888));
        Integer[] comparisonArr96 = {424, 140, 736, 104, 310, 685, 957, 41, 246, 389, 628, 705, 768, 962, 388, 584, 986};
        assertEquals(17, avlTree.size());
        comparisonList = new LinkedList<>(Arrays.asList(comparisonArr96));
        assertEquals(comparisonList, avlTree.levelorder());
        assertEquals((Integer) 685, avlTree.remove(685));
        Integer[] comparisonArr97 = {424, 140, 736, 104, 310, 628, 957, 41, 246, 389, 584, 705, 768, 962, 388, 986};
        assertEquals(16, avlTree.size());
        comparisonList = new LinkedList<>(Arrays.asList(comparisonArr97));
        assertEquals(comparisonList, avlTree.levelorder());
        assertEquals((Integer) 310, avlTree.remove(310));
        Integer[] comparisonArr98 = {424, 140, 736, 104, 388, 628, 957, 41, 246, 389, 584, 705, 768, 962, 986};
        assertEquals(15, avlTree.size());
        comparisonList = new LinkedList<>(Arrays.asList(comparisonArr98));
        assertEquals(comparisonList, avlTree.levelorder());
        assertEquals((Integer) 584, avlTree.remove(584));
        Integer[] comparisonArr99 = {424, 140, 736, 104, 388, 628, 957, 41, 246, 389, 705, 768, 962, 986};
        assertEquals(14, avlTree.size());
        comparisonList = new LinkedList<>(Arrays.asList(comparisonArr99));
        assertEquals(comparisonList, avlTree.levelorder());
        assertEquals((Integer) 388, avlTree.remove(388));
        Integer[] comparisonArr100 = {424, 140, 736, 104, 246, 628, 957, 41, 389, 705, 768, 962, 986};
        assertEquals(13, avlTree.size());
        comparisonList = new LinkedList<>(Arrays.asList(comparisonArr100));
        assertEquals(comparisonList, avlTree.levelorder());
        assertEquals((Integer) 389, avlTree.remove(389));
        Integer[] comparisonArr101 = {424, 140, 736, 104, 246, 628, 957, 41, 705, 768, 962, 986};
        assertEquals(12, avlTree.size());
        comparisonList = new LinkedList<>(Arrays.asList(comparisonArr101));
        assertEquals(comparisonList, avlTree.levelorder());
        assertEquals((Integer) 736, avlTree.remove(736));
        Integer[] comparisonArr102 = {424, 140, 957, 104, 246, 705, 962, 41, 628, 768, 986};
        assertEquals(11, avlTree.size());
        comparisonList = new LinkedList<>(Arrays.asList(comparisonArr102));
        assertEquals(comparisonList, avlTree.levelorder());
        assertEquals((Integer) 140, avlTree.remove(140));
        Integer[] comparisonArr103 = {424, 104, 957, 41, 246, 705, 962, 628, 768, 986};
        assertEquals(10, avlTree.size());
        comparisonList = new LinkedList<>(Arrays.asList(comparisonArr103));
        assertEquals(comparisonList, avlTree.levelorder());
        assertEquals((Integer) 962, avlTree.remove(962));
        Integer[] comparisonArr104 = {424, 104, 957, 41, 246, 705, 986, 628, 768};
        assertEquals(9, avlTree.size());
        comparisonList = new LinkedList<>(Arrays.asList(comparisonArr104));
        assertEquals(comparisonList, avlTree.levelorder());
        assertEquals((Integer) 705, avlTree.remove(705));
        Integer[] comparisonArr105 = {424, 104, 957, 41, 246, 628, 986, 768};
        assertEquals(8, avlTree.size());
        comparisonList = new LinkedList<>(Arrays.asList(comparisonArr105));
        assertEquals(comparisonList, avlTree.levelorder());
        assertEquals((Integer) 986, avlTree.remove(986));
        Integer[] comparisonArr106 = {424, 104, 768, 41, 246, 628, 957};
        assertEquals(7, avlTree.size());
        comparisonList = new LinkedList<>(Arrays.asList(comparisonArr106));
        assertEquals(comparisonList, avlTree.levelorder());
        assertEquals((Integer) 768, avlTree.remove(768));
        Integer[] comparisonArr107 = {424, 104, 628, 41, 246, 957};
        assertEquals(6, avlTree.size());
        comparisonList = new LinkedList<>(Arrays.asList(comparisonArr107));
        assertEquals(comparisonList, avlTree.levelorder());
        assertEquals((Integer) 41, avlTree.remove(41));
        Integer[] comparisonArr108 = {424, 104, 628, 246, 957};
        assertEquals(5, avlTree.size());
        comparisonList = new LinkedList<>(Arrays.asList(comparisonArr108));
        assertEquals(comparisonList, avlTree.levelorder());
        assertEquals((Integer) 246, avlTree.remove(246));
        Integer[] comparisonArr109 = {424, 104, 628, 957};
        assertEquals(4, avlTree.size());
        comparisonList = new LinkedList<>(Arrays.asList(comparisonArr109));
        assertEquals(comparisonList, avlTree.levelorder());
        assertEquals((Integer) 104, avlTree.remove(104));
        Integer[] comparisonArr110 = {628, 424, 957};
        assertEquals(3, avlTree.size());
        comparisonList = new LinkedList<>(Arrays.asList(comparisonArr110));
        assertEquals(comparisonList, avlTree.levelorder());
        assertEquals((Integer) 424, avlTree.remove(424));
        Integer[] comparisonArr111 = {628, 957};
        assertEquals(2, avlTree.size());
        comparisonList = new LinkedList<>(Arrays.asList(comparisonArr111));
        assertEquals(comparisonList, avlTree.levelorder());
        assertEquals((Integer) 957, avlTree.remove(957));
        Integer[] comparisonArr112 = {628};
        assertEquals(1, avlTree.size());
        comparisonList = new LinkedList<>(Arrays.asList(comparisonArr112));
        assertEquals(comparisonList, avlTree.levelorder());
        assertEquals((Integer) 628, avlTree.remove(628));
        Integer[] comparisonArr113 = {};
        assertEquals(0, avlTree.size());
        comparisonList = new LinkedList<>(Arrays.asList(comparisonArr113));
        assertEquals(comparisonList, avlTree.levelorder());
    }
}